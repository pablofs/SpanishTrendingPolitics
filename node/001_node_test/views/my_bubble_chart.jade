html
  body
    style.
      text {
      font: sans-serif;
      }

      /* slider */
      div .slider {
      background-color: #393939;
      font-size: 14px;
      font-family: 'Raleway', sans-serif;
      }
      p {
      color: black;
      margin: 50px;
      }
      a {
      color: #4FDEF2;
      }
      .axis {
      fill: gray;
      -webkit-user-select: none;
      -moz-user-select: none;
      user-select: none;
      }
      .axis .halo {
      stroke: gray;
      stroke-width: 4px;
      stroke-linecap: round;
      }
      .slider .handle path {
      stroke: black;
      stroke-width: 3px;
      stroke-linecap: round;
      pointer-events: none;
      }
      .slider .handle text {
      fill: black;
      text-align: center;
      font-size: 18px;
      }   
    span
    #slider(align='center')

    #my_first_bubble_chart
    script(src='http://d3js.org/d3.v3.min.js')
    script(type='text/javascript').
      var all_data_set = JSON.parse('{}');
      var diameter = 600,
      format = d3.format(",d"),
      // https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors
      color = d3.scale.category20c();
      var bubble = d3.layout.pack()
      .sort(null)
      .size([diameter, diameter])
      .padding(1.5);
      var svg = d3.select("#my_first_bubble_chart").append("svg")
      .attr("width", diameter)
      .attr("height", diameter)
      .attr("class", "bubble");
      d3.json("data/my_bubble_chart/common_topic_dict.json", function(data) {
        all_data_set = data;
      });
      
      function render_my_bubble_chart(data) {
      var node = svg.selectAll(".node")
      .data(bubble.nodes(processData(data))
      .filter(function(d) { return !d.children; }))
      .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
      node.append("title")
      .text(function(d) {
      var result = d.className + ": (" + (100.*d.value).toFixed(2) + "%)";
      var sum = d.k1 + d.k2;
      if (d.k1 > 0) {
      result += "\nCongrÃ©s: (" + (100.*d.k1/sum).toFixed(2) + "%)";
      }
      if (d.k2 > 0) {
      result += "\nCIS: (" + (100.*d.k2/sum).toFixed(2) + "%)";
      }
      return result;
      });
      node.append("circle")
      .attr("r", function(d) { return d.r; })
      .attr("stroke", function (d) { return "black" })
      .attr("stroke-width", "0")
      .style("fill", function(d) { return d.k2 > d.k1 ? "pink" : "magenta"; });
      node.append("circle")
      .attr("r", function(d) {
      var result = 0;
      if (d.k1 + d.k2 > 0.99) {
      if (d.k1>d.k2) {
      result = d.r * Math.sqrt(d.k2);
      }
      else {
      result = d.r * Math.sqrt(d.k1);
      }
      }
      return result;
      })
      .attr("stroke", function (d) { return "black" })
      .attr("stroke-width", "0")
      .style("fill", function(d) { return d.k2 > d.k1 ? "magenta" : "pink"; });
      node.append("text")
      .attr("dy", ".3em")
      .style("text-anchor", "middle")
      .style("font-size", function(d) { return Math.round(d.r/4)+"px"; })
      .text(function(d) { return d.className; })
      //.call(wrap, function(d) { return Math.round(d.r/6.); }, function(d) { return Math.round(d.r/2.); });
      .call(wrap, 12, 60);
      };
      function processData(data) {
      var newDataSet = [];
      for (var i = 0; i < data.length; i++) {
      // k1 -> congres
      // k2 -> CIS
      newDataSet.push({packageName: "Topics", className: data[i][0], value: data[i][3], k1:data[i][1],k2:data[i][2]});
      }
      return {children: newDataSet};
      }
      // Wrapping Long Labels
      // http://bl.ocks.org/mbostock/7555321
      function wrap(text, fontSize, width) {
      text.each(function() {
      var text = d3.select(this),
      words = text.text().split(/\s+/).reverse(),
      word,
      line = [],
      lineNumber = 0,
      lineHeight = fontSize/20., // 1.1 // ems
      y = text.attr("y"),
      dy = parseFloat(text.attr("dy")),
      tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
      while (word = words.pop()) {
      line.push(word);
      tspan.text(line.join(" "));
      // alert(tspan.node().getComputedTextLength()*fontSize + " > " + width)
      if (tspan.node().getComputedTextLength()*fontSize > width) {
      line.pop();
      tspan.text(line.join(" "));
      line = [word];
      tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
      }
      }
      });
      }
      d3.select(self.frameElement).style("height", diameter + "px");

    script.
      formatDate = d3.time.format("%B %Y");
      formatDateToBubbleChart = d3.time.format("%Y-%m-01");
      // parameters
      var margin = {
      top: 25,
      right: 100,
      bottom: 25,
      left: 100
      },
      width = 960 - margin.left - margin.right,
      height = 100 - margin.bottom - margin.top;
      // scale function
      var timeScale = d3.time.scale()
      .domain([new Date('2000-9-13'), new Date('2015-3-11')])
      .range([0, width])
      .clamp(true);
      // initial value
      var startValue = timeScale(new Date('2015-2-01'));
      startingValue = new Date('2015-2-01');
      //////////////////
      // defines brush
      var brush = d3.svg.brush()
      .x(timeScale)
      .extent([startingValue, startingValue])
      .on("brush", brushed);
      var svgSlider = d3.select("#slider").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      // classic transform to position g
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      svgSlider.append("g")
      .attr("class", "x axis")
      // put in middle of screen
      .attr("transform", "translate(0," + height / 2 + ")")
      // inroduce axis
      .call(d3.svg.axis()
      .scale(timeScale)
      .orient("bottom")
      .tickFormat(function(d) {
      return formatDate(d);
      })
      .tickSize(0)
      .tickPadding(12)
      .tickValues([timeScale.domain()[0], timeScale.domain()[1]]))
      .select(".domain")
      .select(function() {
      console.log(this);
      return this.parentNode.appendChild(this.cloneNode(true));
      })
      .attr("class", "halo");
      var slider = svgSlider.append("g")
      .attr("class", "slider")
      .call(brush);
      slider.selectAll(".extent,.resize")
      .remove();
      slider.select(".background")
      .attr("height", height);
      var handle = slider.append("g")
      .attr("class", "handle")
      handle.append("path")
      .attr("transform", "translate(0," + height / 2 + ")")
      .attr("d", "M 0 -20 V 20")
      handle.append('text')
      .text(startingValue)
      .attr("transform", "translate(" + (-18) + " ," + (height / 2 - 25) + ")");
      slider
      .call(brush.event)
      function brushed() {
      var value = brush.extent()[0];
      if (d3.event.sourceEvent) { // not a programmatic event
      value = timeScale.invert(d3.mouse(this)[0]);
      brush.extent([value, value]);
      }
      handle.attr("transform", "translate(" + timeScale(value) + ",0)");
      handle.select('text').text(formatDate(value));
      // alert(formatDateToBubbleChart(value));
      // Render bubble chart with month-year data
      if(all_data_set.hasOwnProperty(formatDateToBubbleChart(value))){
        svg.selectAll("*").remove();
        render_my_bubble_chart(all_data_set[formatDateToBubbleChart(value)]);
      }
      else {
        // alert(formatDateToBubbleChart(value));
      }
      }
